// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id    Int     @id @default(autoincrement())
  // User Data
  name String?
  email String @unique
  password String
  picture String?
  phoneNumber String?
  vatNumber String?
  // Booleans
  isEmailVerified Boolean @default(false)
  isPhoneNumberVerified Boolean @default(false)
  isBanned Boolean @default(false)
  // Stripe
  stripeCustomerId String?
  // Company
  companyName String?
  companyAddress String?
  companyCity String?
  companyPostalCode String?
  // Contacts
  contacts Contacts[]
  // Contracts
  contracts Contracts[]
  // Properties
  properties Properties[]
  // Transactions
  transactions Transactions[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ContactType {
  individual
  company
}

enum IdentityType {
  citizenCard
  oldIdCard
  passport
  drivingLicense
  residencePermit
  // TODO: Terminar isso
}

enum MaritalStatus {
  single
  married
  divorced
  widowed
}

model Contacts {
  id    Int     @id @default(autoincrement())
  // Contact Info
  name  String
  vat String

  // Marital
  maritalStatus MaritalStatus
  marriedUnderRegime String?

  // Identity Card
  identityType IdentityType
  identityNumber String
  identityExpirationDate DateTime
  identityIssuer String




  // Contact Address
  country String // Company or Individual
  address String // Company or Individual
  neighborhood String // Company or Individual
  state String // Company or Individual
  city String // Company or Individual
  zipCode String // Company or Individual

  // Company
  companyRegistration String // Registro Comercial
  companyCode String // Certidao Permanente
  companyRCBECode String // Codigo RCBE
  companySocialCapital String // Capital Social

  // ContactType
  contactType ContactType

  // User
  userId Int
  user Users @relation(fields: [userId], references: [id])
  
  // Contracts 
  contactsContract ContractContacts[]

  deleted Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Properties {
  id    Int     @id @default(autoincrement())
  // Property Info
  fraction String // Compiscão (H)
  floor String // Andar
  destination String // Destino (Habitacao, Comercio, Serviços)
  district String // Distrito
  neighborhood String // Freguesia
  address String // Morada
  number String // Numero
  city String // Localidade
  postalCode String // Codigo Postal
  matrixRegistration String // Inscricao Matricial
  buildingDescriptionNumber String // Descrição do Prédio
  buildingDescriptionRegistry String // Conservatoria do Registo Predial
  luNumber String // Numero de LU (Licença de Utilização)
  luDate DateTime // Data de LU (Licença de Utilização)
  luIssuer String // Entidade Emissora da LU (Licença de Utilização)
  ecLetter String // Letra do Certificado Energético
  ecNumber String // Certificado Energético
  ecValidUntil DateTime // Data do Certificado Energético

  // charges (Despesas)
  chargesType String // Tipo de Despesa
  chargesBank String // Banco
  chargesAP String // AP
  chargesDate DateTime // Data de Despesa
  

  // Contracts
  contracts Contracts[]

  // User
  userId Int
  user Users @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum ContactsType {
  seller
  buyer
  renter
  landlord
}

model ContractContacts {
  id Int @id @default(autoincrement())
  // Contracts
  contractId Int
  contracts Contracts @relation(fields: [contractId], references: [id])

  // Contacts
  contactId Int
  contacts Contacts @relation(fields: [contactId], references: [id])

  // Contact Type
  contactType ContactsType
}

enum ContractType {
  SALE
  RENT
}

enum ContractTemplateType {
  SALE
  RENT
  VEHICLE_SALE
  // Outros tipos futuros
}

model ContractTemplate {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  type        ContractTemplateType
  html        String              @db.Text
  price       Float               @default(0)
  isActive    Boolean             @default(true)
  clausules   Json?               @default("[]") // Para suportar i18n { "en": "...", "pt": "..." }
  steps       ContractStep[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  contracts   Contracts[]
}

model ContractStep {
  id                Int              @id @default(autoincrement())
  step             Int
  title            Json             // Para suportar i18n { "en": "...", "pt": "..." }
  description      Json             // Para suportar i18n { "en": "...", "pt": "..." }
  templateId       Int
  template         ContractTemplate @relation(fields: [templateId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([step, templateId])
}

model Contracts {
  id Int @id @default(autoincrement())

  // ContractType
  price Float
  deposit Float?
  paymentMethod String?
  contractType ContractType
  htmlContent String? // Store the HTML content
  shareToken String? @unique // Token para compartilhamento
  duration Int? // Duração do contrato em meses (para arrendamento)
  rentDueDay Int? // Dia do mês para pagamento (para arrendamento)

  // Contacts
  contacts ContractContacts[]

  // Properties
  propertyId Int
  property Properties @relation(fields: [propertyId], references: [id])

  // User
  generatedBy Int
  user Users @relation(fields: [generatedBy], references: [id])

  // Transaction
  transactions Transactions[]

  // Template
  templateId Int
  template   ContractTemplate @relation(fields: [templateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionType {
  credit
  debit
}

enum TransactionSubType {
  contractCreation
  contractEdit
  contractDownload
  manualCredit
}

model Transactions {
  id    Int     @id @default(autoincrement())
  amount Float
  type TransactionType
  subType TransactionSubType
  externalId Int?

  // User
  userId Int
  user Users @relation(fields: [userId], references: [id])

  // Contract (opcional)
  contractId Int?
  contract Contracts? @relation(fields: [contractId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}